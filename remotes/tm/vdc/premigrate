#!/bin/bash
# -------------------------------------------------------------------------- #
# Copyright 2013, Gareth Bult <gareth@linux.co.uk>                           #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #
logger -t vdc-nebula "* Running pre-migrate ..."
SRC_HOST=$1
DST_HOST=$2
DIR_HOST=$3
VMID=$4
DSID=$5
TEMP=$6

ROOT=$(dirname $(dirname $(dirname $0)))
source ${ROOT}/hooks/vdc/common.sh

#NAME="ON_IM_$VMID"
CACHE_SIZE="none"
CACHE_LVM="none"
DS_NAME="none"

tool="${ROOT}/hooks/vdc/tool.py"
conf="${ROOT}/hooks/vdc/mkconfig.py"
gids="${ROOT}/hooks/vdc/get_image_ids.py"
vdc="${ROOT}/../vdc-nebula/remotes/binaries"

eval `${gids} $VMID`
vdc_log "Premigrate with NAME=${CACHE}"

vdctool="sudo $vdc/vdc-tool -n ${CACHE} "
vdcstore="sudo /bin/bash -c 'ulimit -c unlimited && exec $vdc/vdc-store -n ${CACHE} -R'"

while IFS= read -r -d '' element; do
    XPATH_ELEMENTS[i++]="$element"
done < <($XPATH  	/VM/TEMPLATE/DISK/DATASTORE_ID)

DSID="${XPATH_ELEMENTS[0]}"

vdc_log "${tool} ln $VMID $DSID $DST_HOST"
vdc_log "`${tool} ln $VMID $DSID $DST_HOST`"
eval `${tool} ln $VMID $DSID $DST_HOST`

execute ${DS_NAME}    "sudo ${conf}" "Error Updating VDC Server Config"
if [ "${REPLICA_ID}" == "none" ]
then
    REPLICA=""
else
    REPLICA="vdc:${REPLICA_DS}/${REPLICA_STORE}"
    execute ${REPLICA_DS} "sudo ${conf}" "Error Updating VDC Server Config"
fi

execute ${DST_HOST} "$vdctool --create -c${CACHE_SIZE} --nonpersist lvm:${CACHE_LVM}/${CACHE} vdc:${DS_NAME}/${STORE} $REPLICA" "Error creating Cache"
execute ${DST_HOST} "${vdcstore}" "Unable to start cache on $DST_HOST"
execute ${SRC_HOST} "${vdctool} --migrate ${DST_HOST}" "Unable to complete cache migrate"
exit 0
